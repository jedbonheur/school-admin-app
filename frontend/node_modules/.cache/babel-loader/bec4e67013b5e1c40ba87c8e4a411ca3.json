{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/nseng/Desktop/Concordia-bootcamps/school-admin/school-management-system-app/frontend/src/components/Forms/StudentApplicationForm.js\";\nimport React from 'react';\nimport { Formik, Form, useField } from 'formik'; // import { MyTextInput, MyCheckbox, MySelect, DatePickerField} from '../UIs/FormInputs'\n\nimport * as Yup from 'yup'; // And now we can use these\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StudentApplicationForm = () => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$();\n\n  const MyTextInput = _ref => {\n    _s();\n\n    let {\n      label,\n      ...props\n    } = _ref;\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.id || props.name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"text-input\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 8\n      }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 10\n      }, this) : null]\n    }, void 0, true);\n  };\n\n  _s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n    return [useField];\n  });\n\n  const MyCheckbox = _ref2 => {\n    _s2();\n\n    let {\n      children,\n      ...props\n    } = _ref2;\n    // React treats radios and checkbox inputs differently other input types, select, and textarea.\n    // Formik does this too! When you specify `type` to useField(), it will\n    // return the correct bag of props for you -- a `checked` prop will be included\n    // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\n    const [field, meta] = useField({ ...props,\n      type: 'checkbox'\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"checkbox-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          ...field,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 10\n        }, this), children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 8\n      }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 6\n    }, this);\n  };\n\n  _s2(MyCheckbox, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n    return [useField];\n  });\n\n  const MySelect = _ref3 => {\n    _s3();\n\n    let {\n      label,\n      ...props\n    } = _ref3;\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.id || props.name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", { ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 8\n      }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }, this);\n  };\n\n  _s3(MySelect, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n    return [useField];\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Subscribe!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        acceptedTerms: false,\n        // added for our checkbox\n        jobType: '' // added for our select\n\n      },\n      validationSchema: Yup.object({\n        firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n        lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n        email: Yup.string().email('Invalid email address').required('Required'),\n        acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms and conditions.'),\n        jobType: Yup.string().oneOf(['designer', 'development', 'product', 'other'], 'Invalid Job Type').required('Required')\n      }),\n      onSubmit: (values, _ref4) => {\n        let {\n          setSubmitting\n        } = _ref4;\n        console.log(values);\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"First Name\",\n          name: \"firstName\",\n          type: \"text\",\n          placeholder: \"Jane\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Last Name\",\n          name: \"lastName\",\n          type: \"text\",\n          placeholder: \"Doe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Email Address\",\n          name: \"email\",\n          type: \"email\",\n          placeholder: \"jane@formik.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n          label: \"Job Type\",\n          name: \"jobType\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a job type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"designer\",\n            children: \"Designer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"development\",\n            children: \"Developer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"product\",\n            children: \"Product Manager\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"other\",\n            children: \"Other\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(MyCheckbox, {\n          name: \"acceptedTerms\",\n          children: \"I accept the terms and conditions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n};\n\n_c = StudentApplicationForm;\nexport default StudentApplicationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentApplicationForm\");","map":{"version":3,"sources":["/mnt/c/Users/nseng/Desktop/Concordia-bootcamps/school-admin/school-management-system-app/frontend/src/components/Forms/StudentApplicationForm.js"],"names":["React","Formik","Form","useField","Yup","StudentApplicationForm","MyTextInput","label","props","field","meta","id","name","touched","error","MyCheckbox","children","type","MySelect","firstName","lastName","email","acceptedTerms","jobType","object","string","max","required","boolean","oneOf","values","setSubmitting","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Formik, Form, useField } from 'formik';\r\n// import { MyTextInput, MyCheckbox, MySelect, DatePickerField} from '../UIs/FormInputs'\r\nimport * as Yup from 'yup';\r\n// And now we can use these\r\nconst StudentApplicationForm = () => {\r\n const MyTextInput = ({ label, ...props }) => {\r\n   // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n   // which we can spread on <input>. We can use field meta to show an error\r\n   // message if the field is invalid and it has been touched (i.e. visited)\r\n   const [field, meta] = useField(props);\r\n   return (\r\n     <>\r\n       <label htmlFor={props.id || props.name}>{label}</label>\r\n       <input className=\"text-input\" {...field} {...props} />\r\n       {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n     </>\r\n   );\r\n };\r\n \r\n const MyCheckbox = ({ children, ...props }) => {\r\n   // React treats radios and checkbox inputs differently other input types, select, and textarea.\r\n   // Formik does this too! When you specify `type` to useField(), it will\r\n   // return the correct bag of props for you -- a `checked` prop will be included\r\n   // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\r\n   const [field, meta] = useField({ ...props, type: 'checkbox' });\r\n   return (\r\n     <div>\r\n       <label className=\"checkbox-input\">\r\n         <input type=\"checkbox\" {...field} {...props} />\r\n         {children}\r\n       </label>\r\n       {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n     </div>\r\n   );\r\n };\r\n \r\n const MySelect = ({ label, ...props }) => {\r\n   const [field, meta] = useField(props);\r\n   return (\r\n     <div>\r\n       <label htmlFor={props.id || props.name}>{label}</label>\r\n       <select {...field} {...props} />\r\n       {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n     </div>\r\n   );\r\n };\r\nreturn (\r\n     <>\r\n       <h1>Subscribe!</h1>\r\n       <Formik\r\n         initialValues={{\r\n           firstName: '',\r\n           lastName: '',\r\n           email: '',\r\n           acceptedTerms: false, // added for our checkbox\r\n           jobType: '', // added for our select\r\n         }}\r\n         validationSchema={Yup.object({\r\n           firstName: Yup.string()\r\n             .max(15, 'Must be 15 characters or less')\r\n             .required('Required'),\r\n           lastName: Yup.string()\r\n             .max(20, 'Must be 20 characters or less')\r\n             .required('Required'),\r\n           email: Yup.string()\r\n             .email('Invalid email address')\r\n             .required('Required'),\r\n           acceptedTerms: Yup.boolean()\r\n             .required('Required')\r\n             .oneOf([true], 'You must accept the terms and conditions.'),\r\n           jobType: Yup.string()\r\n             .oneOf(\r\n               ['designer', 'development', 'product', 'other'],\r\n               'Invalid Job Type'\r\n             )\r\n             .required('Required'),\r\n         })}\r\n         onSubmit={(values, { setSubmitting }) => {\r\n             console.log(values)\r\n         }}\r\n       >\r\n         <Form>\r\n           <MyTextInput\r\n             label=\"First Name\"\r\n             name=\"firstName\"\r\n             type=\"text\"\r\n             placeholder=\"Jane\"\r\n           />\r\n \r\n           <MyTextInput\r\n             label=\"Last Name\"\r\n             name=\"lastName\"\r\n             type=\"text\"\r\n             placeholder=\"Doe\"\r\n           />\r\n \r\n           <MyTextInput\r\n             label=\"Email Address\"\r\n             name=\"email\"\r\n             type=\"email\"\r\n             placeholder=\"jane@formik.com\"\r\n           />\r\n \r\n           <MySelect label=\"Job Type\" name=\"jobType\">\r\n             <option value=\"\">Select a job type</option>\r\n             <option value=\"designer\">Designer</option>\r\n             <option value=\"development\">Developer</option>\r\n             <option value=\"product\">Product Manager</option>\r\n             <option value=\"other\">Other</option>\r\n           </MySelect>\r\n \r\n           <MyCheckbox name=\"acceptedTerms\">\r\n             I accept the terms and conditions\r\n           </MyCheckbox>\r\n \r\n           <button type=\"submit\">Submit</button>\r\n         </Form>\r\n       </Formik>\r\n     </>\r\n   );\r\n};\r\n\r\nexport default StudentApplicationForm;"]},"metadata":{},"sourceType":"module"}