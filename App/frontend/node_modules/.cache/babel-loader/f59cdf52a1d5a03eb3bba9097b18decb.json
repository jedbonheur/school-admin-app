{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/nseng/Desktop/Concordia-bootcamps/school-admin/school-management-system-app/frontend/src/components/UIs/FormInputs.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React from 'react';\nimport { useField, useFormikContext } from 'formik';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DatePickerField = _ref => {\n  _s();\n\n  let {\n    label,\n    ...props\n  } = _ref;\n  const {\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, { ...field,\n      ...props,\n      selected: field.value && new Date(field.value) || null // onChange={val => {\n      //   setFieldValue(field.name, val);\n      // }}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(DatePickerField, \"2G450Kq0wM4hOZSSEfyv9RXNPgI=\", false, function () {\n  return [useFormikContext, useField];\n});\n\n_c = DatePickerField;\nexport const MyTextInput = _ref2 => {\n  _s2();\n\n  let {\n    label,\n    ...props\n  } = _ref2;\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error\n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 8\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 10\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s2(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c2 = MyTextInput;\nexport const MyCheckbox = _ref3 => {\n  _s3();\n\n  let {\n    children,\n    ...props\n  } = _ref3;\n  // React treats radios and checkbox inputs differently other input types, select, and textarea.\n  // Formik does this too! When you specify `type` to useField(), it will\n  // return the correct bag of props for you -- a `checked` prop will be included\n  // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\n  const [field, meta] = useField({ ...props,\n    type: 'checkbox'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"checkbox-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 10\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 8\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 10\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 6\n  }, this);\n};\n\n_s3(MyCheckbox, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c3 = MyCheckbox;\nexport const MySelect = _ref4 => {\n  _s4();\n\n  let {\n    label,\n    ...props\n  } = _ref4;\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", { ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 8\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 6\n  }, this);\n};\n\n_s4(MySelect, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c4 = MySelect;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DatePickerField\");\n$RefreshReg$(_c2, \"MyTextInput\");\n$RefreshReg$(_c3, \"MyCheckbox\");\n$RefreshReg$(_c4, \"MySelect\");","map":{"version":3,"sources":["/mnt/c/Users/nseng/Desktop/Concordia-bootcamps/school-admin/school-management-system-app/frontend/src/components/UIs/FormInputs.js"],"names":["React","useField","useFormikContext","DatePicker","DatePickerField","label","props","setFieldValue","field","meta","id","name","value","Date","touched","error","MyTextInput","MyCheckbox","children","type","MySelect"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { useField, useFormikContext } from 'formik';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport const DatePickerField = ({label, ...props }) => {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field,meta] = useField(props);\r\n  return (\r\n   <>\r\n    <label htmlFor={props.id || props.name}>{label}\r\n    </label>\r\n    <DatePicker\r\n      {...field}\r\n      {...props}\r\n      selected={(field.value && new Date(field.value)) || null}\r\n      // onChange={val => {\r\n      //   setFieldValue(field.name, val);\r\n      // }}\r\n    />\r\n    {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n   </>\r\n  );\r\n};\r\n\r\nexport const MyTextInput = ({ label, ...props }) => {\r\n   // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n   // which we can spread on <input>. We can use field meta to show an error\r\n   // message if the field is invalid and it has been touched (i.e. visited)\r\n   const [field, meta] = useField(props);\r\n   return (\r\n     <>\r\n       <label htmlFor={props.id || props.name}>{label}</label>\r\n       <input className=\"text-input\" {...field} {...props} />\r\n       {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n     </>\r\n   );\r\n };\r\n\r\n export const MyCheckbox = ({ children, ...props }) => {\r\n   // React treats radios and checkbox inputs differently other input types, select, and textarea.\r\n   // Formik does this too! When you specify `type` to useField(), it will\r\n   // return the correct bag of props for you -- a `checked` prop will be included\r\n   // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\r\n   const [field, meta] = useField({ ...props, type: 'checkbox' });\r\n   return (\r\n     <div>\r\n       <label className=\"checkbox-input\">\r\n         <input type=\"checkbox\" {...field} {...props} />\r\n         {children}\r\n       </label>\r\n       {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n     </div>\r\n   );\r\n };\r\n\r\nexport const MySelect = ({ label, ...props }) => {\r\n   const [field, meta] = useField(props);\r\n   return (\r\n     <div>\r\n       <label htmlFor={props.id || props.name}>{label}</label>\r\n       <select {...field} {...props} />\r\n       {meta.touched && meta.error ? (\r\n         <div className=\"error\">{meta.error}</div>\r\n       ) : null}\r\n     </div>\r\n   );\r\n };"]},"metadata":{},"sourceType":"module"}