{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/nseng/Desktop/Concordia-bootcamps/school-admin/school-management-system-app/frontend/src/components/Admin/student/AddClassForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport { MyTextInput, MySelect } from '../../UIs/FormInputs';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios'); // And now we can use these\n\n\nconst AddClassForm = () => {\n  _s();\n\n  const [instructors, setInstructions] = useState(false);\n  useEffect(() => {\n    axios.get('/get-instructors/').then(function (response) {\n      if (response.status === 200) {\n        setInstructions(response.data.data);\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  if (!instructors) {\n    return;\n  }\n\n  const departments = ['Computer Science', 'software engineering', 'networking', 'web development', 'bootcamp'];\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Class\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        course_name: '',\n        course_depertment: '',\n        instructor: ''\n      },\n      validationSchema: Yup.object({\n        course_name: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n        course_depertment: Yup.string().oneOf([...departments], 'Invalid Department').required('Required'),\n        instructor: Yup.string().required('Required')\n      }),\n      onSubmit: values => {\n        const formParams = { ...values\n        };\n        console.log(formParams);\n        axios.post(`/addCourse/${formParams.instructor}`).then(function (response) {\n          if (response.status === 200) {\n            navigate(\"/admin/thankyou\", {\n              replace: true,\n              state: 'Course Successfully Created'\n            });\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      },\n      children: _ref => {\n        let {\n          setFieldValue\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-form\",\n            children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n              label: \"Course Name\",\n              name: \"course_name\",\n              type: \"text\",\n              placeholder: \"Java Script\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n              label: \"Department\",\n              name: \"course_depertment\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 12\n              }, this), departments.map(department => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: department,\n                  children: department\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 22\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n              label: \"Instructor\",\n              name: \"instructor\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 12\n              }, this), instructors.map(instructor => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: instructor._id,\n                  children: [instructor.firstName, \" \", instructor.lastName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 22\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddClassForm, \"RnvKSKhdwx20toCPAvkkmlrW0wE=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AddClassForm;\nexport default AddClassForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddClassForm\");","map":{"version":3,"sources":["/mnt/c/Users/nseng/Desktop/Concordia-bootcamps/school-admin/school-management-system-app/frontend/src/components/Admin/student/AddClassForm.js"],"names":["React","useEffect","useState","Formik","Form","MyTextInput","MySelect","Yup","useNavigate","axios","require","AddClassForm","instructors","setInstructions","get","then","response","status","data","catch","error","console","log","departments","navigate","course_name","course_depertment","instructor","object","string","max","required","oneOf","values","formParams","post","replace","state","setFieldValue","map","department","_id","firstName","lastName"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport { MyTextInput, MySelect} from '../../UIs/FormInputs'\r\nimport * as Yup from 'yup';\r\nimport {useNavigate } from 'react-router-dom';\r\nconst axios = require('axios')\r\n\r\n// And now we can use these\r\nconst AddClassForm = () => {\r\n  const [instructors,setInstructions] =useState(false)\r\n  useEffect(() => {\r\n      axios.get('/get-instructors/')\r\n          .then(function (response) {\r\n            if(response.status === 200){\r\n              setInstructions(response.data.data)\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n              console.log(error)\r\n          });\r\n  }, []);\r\n  if(!instructors){\r\n    return \r\n  }\r\n  const departments = ['Computer Science', 'software engineering', 'networking', 'web development', 'bootcamp']\r\n  const navigate = useNavigate();\r\n  return (\r\n    <>\r\n      <h2>Add Class</h2>\r\n      <Formik\r\n        initialValues={{\r\n          course_name: '',\r\n          course_depertment: '',\r\n          instructor: '',\r\n        }}\r\n\r\n        validationSchema={Yup.object({\r\n          course_name: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\r\n          course_depertment: Yup.string().oneOf([...departments],'Invalid Department').required('Required'),\r\n          instructor: Yup.string().required('Required'),\r\n        })}\r\n\r\n        onSubmit={(values) => {\r\n        const formParams = {...values}\r\n        console.log(formParams)\r\n        axios.post(`/addCourse/${formParams.instructor}`)\r\n        .then(function (response) {\r\n          if(response.status === 200){\r\n            navigate(\"/admin/thankyou\", { replace: true, state: 'Course Successfully Created' });\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n        }}\r\n      >\r\n      \r\n   {({setFieldValue}) => (\r\n      <Form>\r\n        <div className=\"flex-form\">\r\n          <MyTextInput\r\n            label=\"Course Name\"\r\n            name=\"course_name\"\r\n            type=\"text\"\r\n            placeholder=\"Java Script\"\r\n          />\r\n\r\n          <MySelect label=\"Department\" name=\"course_depertment\">\r\n           <option value=\"\">Select</option>\r\n            {\r\n             departments.map(department => {\r\n              return <option value={department}>{department}</option>\r\n             })\r\n            }\r\n          </MySelect>\r\n\r\n          <MySelect label=\"Instructor\" name=\"instructor\">\r\n           <option value=\"\">Select</option>\r\n            {\r\n             instructors.map(instructor => {\r\n              return <option value={instructor._id}>{instructor.firstName} {instructor.lastName}</option>\r\n             })\r\n            }\r\n          </MySelect> \r\n\r\n        </div>\r\n         <button className=\"btn\"type=\"submit\">Submit</button>\r\n        </Form>\r\n       )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddClassForm;"]},"metadata":{},"sourceType":"module"}